// prisma/schema.prisma

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String       @id @default(uuid())
  email         String       @unique
  username      String       @unique
  name          String?
  createdAt     DateTime     @default(now())
  socialLinks   Json?
  isProfilePublic Boolean @default(true)
  quizResponses QuizResponse[]
  // Link to UserStack (the join table)
  stacks        UserStack[]
  following Follows[] @relation("Following")
  followers Follows[] @relation("Followers")
  
}

// This Table replaces your old "RecommendedStack"
// All canonical tech/items live here
model Item {
  id        String      @id @default(uuid())
  title     String      @unique                   // e.g. "VSCode"
  imageUrl  String                                   
  linkUrl   String?                                 
  category  String      // e.g. "Editor", "Language", etc.
  users     UserStack[] // back‚Äêrelation from join table
}

// Join table between User <-> Item, with a "position" field for ordering
model UserStack {
  userId    String
  itemId    String
  position  Int       @default(0)    // ordering index per user
  createdAt DateTime  @default(now())

  user      User      @relation(fields: [userId], references: [id])
  item      Item      @relation(fields: [itemId], references: [id])

  @@id([userId, itemId])               // composite primary key
}

// Add this to your schema
model Follows {
  followerId String
  followingId String

  follower  User @relation("Following", fields: [followerId], references: [id])
  following User @relation("Followers", fields: [followingId], references: [id])

  @@id([followerId, followingId])
}

model QuizResponse {
  id            String   @id @default(uuid())
  userId        String?  
  sessionId     String   @unique
  questionPairs Json
  chosen        Json
  createdAt     DateTime @default(now())
  user          User?    @relation(fields: [userId], references: [id])
}
